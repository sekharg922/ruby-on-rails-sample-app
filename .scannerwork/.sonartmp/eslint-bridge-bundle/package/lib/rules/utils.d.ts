import { AST, Rule, Scope } from "eslint";
import * as estree from "estree";
import { TSESTree } from "@typescript-eslint/experimental-utils";
import { RequiredParserServices } from "../utils/isRequiredParserServices";
export declare const functionLike: Set<string>;
export declare const sortLike: string[];
export declare type FunctionNodeType = estree.FunctionDeclaration | estree.FunctionExpression | estree.ArrowFunctionExpression;
export declare const FUNCTION_NODES: string[];
/**
 * Returns the module name, when an identifier represents a namespace for that module.
 * Returns undefined otherwise.
 * example: Given `import * as X from 'module_name'`, `getModuleNameOfIdentifier(X)` returns `module_name`
 */
export declare function getModuleNameOfIdentifier(identifier: estree.Identifier, context: Rule.RuleContext): estree.SimpleLiteral | estree.RegExpLiteral | undefined;
/**
 * Returns the module name, when an identifier represents a binding imported from another module.
 * Returns undefined otherwise.
 * example: Given `import { f } from 'module_name'`, `getModuleNameOfImportedIdentifier(f)` returns `module_name`
 */
export declare function getModuleNameOfImportedIdentifier(identifier: estree.Identifier, context: Rule.RuleContext): estree.SimpleLiteral | estree.RegExpLiteral | undefined;
export declare function isIdentifier(node: estree.Node, ...values: string[]): node is estree.Identifier;
export declare function isMemberWithProperty(node: estree.Node, ...values: string[]): boolean;
export declare function isMemberExpression(node: estree.Node, objectValue: string, ...propertyValue: string[]): boolean;
export declare function isUnaryExpression(node: estree.Node | undefined): node is estree.UnaryExpression;
export declare function isArrayExpression(node: estree.Node | undefined): node is estree.ArrayExpression;
export declare function isRequireModule(node: estree.CallExpression, ...moduleNames: string[]): boolean;
export declare function toEncodedMessage(message: string, secondaryLocationsHolder: Array<AST.Token | TSESTree.Node>, secondaryMessages?: string[], cost?: number): string;
export declare function findFirstMatchingLocalAncestor(node: TSESTree.Node, predicate: (node: TSESTree.Node) => boolean): TSESTree.AssignmentPattern | TSESTree.RestElement | TSESTree.ArrayPattern | TSESTree.ObjectPattern | TSESTree.Identifier | TSESTree.TSParameterProperty | TSESTree.VariableDeclaration | TSESTree.VariableDeclarator | TSESTree.ArrowFunctionExpression | TSESTree.AssignmentExpression | TSESTree.BinaryExpression | TSESTree.ConditionalExpression | TSESTree.JSXClosingElement | TSESTree.JSXClosingFragment | TSESTree.JSXExpressionContainer | TSESTree.JSXOpeningElement | TSESTree.JSXOpeningFragment | TSESTree.JSXSpreadChild | TSESTree.LogicalExpression | TSESTree.NewExpression | TSESTree.SequenceExpression | TSESTree.SpreadElement | TSESTree.TSAsExpression | TSESTree.AwaitExpression | TSESTree.CallExpression | TSESTree.ClassExpression | TSESTree.ClassDeclaration | TSESTree.FunctionExpression | TSESTree.BigIntLiteral | TSESTree.Literal | TSESTree.TemplateLiteral | TSESTree.MemberExpression | TSESTree.OptionalCallExpression | TSESTree.OptionalMemberExpression | TSESTree.ArrayExpression | TSESTree.Import | TSESTree.JSXElement | TSESTree.JSXFragment | TSESTree.MetaProperty | TSESTree.ObjectExpression | TSESTree.Super | TSESTree.ThisExpression | TSESTree.TSNullKeyword | TSESTree.TaggedTemplateExpression | TSESTree.TSNonNullExpression | TSESTree.TSTypeAssertion | TSESTree.UnaryExpression | TSESTree.UpdateExpression | TSESTree.YieldExpression | TSESTree.CatchClause | TSESTree.BlockStatement | TSESTree.BreakStatement | TSESTree.ContinueStatement | TSESTree.DebuggerStatement | TSESTree.ExportDefaultDeclaration | TSESTree.ExportAllDeclaration | TSESTree.ExportNamedDeclaration | TSESTree.FunctionDeclaration | TSESTree.TSDeclareFunction | TSESTree.TSImportEqualsDeclaration | TSESTree.TSInterfaceDeclaration | TSESTree.TSModuleDeclaration | TSESTree.TSNamespaceExportDeclaration | TSESTree.TSTypeAliasDeclaration | TSESTree.TSEnumDeclaration | TSESTree.EmptyStatement | TSESTree.ExpressionStatement | TSESTree.IfStatement | TSESTree.DoWhileStatement | TSESTree.ForInStatement | TSESTree.ForOfStatement | TSESTree.ForStatement | TSESTree.WhileStatement | TSESTree.ImportDeclaration | TSESTree.LabeledStatement | TSESTree.TSModuleBlock | TSESTree.ReturnStatement | TSESTree.SwitchStatement | TSESTree.ThrowStatement | TSESTree.TryStatement | TSESTree.WithStatement | TSESTree.ClassBody | TSESTree.ClassProperty | TSESTree.Decorator | TSESTree.ExportSpecifier | TSESTree.ImportDefaultSpecifier | TSESTree.ImportNamespaceSpecifier | TSESTree.ImportSpecifier | TSESTree.JSXAttribute | TSESTree.JSXEmptyExpression | TSESTree.JSXIdentifier | TSESTree.JSXSpreadAttribute | TSESTree.JSXMemberExpression | TSESTree.JSXText | TSESTree.MethodDefinition | TSESTree.Program | TSESTree.Property | TSESTree.SwitchCase | TSESTree.TemplateElement | TSESTree.TSAbstractClassProperty | TSESTree.TSAbstractKeyword | TSESTree.TSAbstractMethodDefinition | TSESTree.TSAnyKeyword | TSESTree.TSArrayType | TSESTree.TSAsyncKeyword | TSESTree.TSBigIntKeyword | TSESTree.TSBooleanKeyword | TSESTree.TSCallSignatureDeclaration | TSESTree.TSClassImplements | TSESTree.TSConditionalType | TSESTree.TSConstructorType | TSESTree.TSConstructSignatureDeclaration | TSESTree.TSDeclareKeyword | TSESTree.TSEmptyBodyFunctionExpression | TSESTree.TSEnumMember | TSESTree.TSExportAssignment | TSESTree.TSExportKeyword | TSESTree.TSExternalModuleReference | TSESTree.TSFunctionType | TSESTree.TSImportType | TSESTree.TSIndexedAccessType | TSESTree.TSIndexSignature | TSESTree.TSInferType | TSESTree.TSInterfaceBody | TSESTree.TSInterfaceHeritage | TSESTree.TSIntersectionType | TSESTree.TSLiteralType | TSESTree.TSMappedType | TSESTree.TSMethodSignature | TSESTree.TSNeverKeyword | TSESTree.TSNumberKeyword | TSESTree.TSObjectKeyword | TSESTree.TSOptionalType | TSESTree.TSParenthesizedType | TSESTree.TSPropertySignature | TSESTree.TSPublicKeyword | TSESTree.TSPrivateKeyword | TSESTree.TSProtectedKeyword | TSESTree.TSQualifiedName | TSESTree.TSReadonlyKeyword | TSESTree.TSRestType | TSESTree.TSStaticKeyword | TSESTree.TSStringKeyword | TSESTree.TSSymbolKeyword | TSESTree.TSThisType | TSESTree.TSTupleType | TSESTree.TSTypeAnnotation | TSESTree.TSTypeLiteral | TSESTree.TSTypeOperator | TSESTree.TSTypeParameter | TSESTree.TSTypeParameterDeclaration | TSESTree.TSTypeParameterInstantiation | TSESTree.TSTypePredicate | TSESTree.TSTypeQuery | TSESTree.TSTypeReference | TSESTree.TSUndefinedKeyword | TSESTree.TSUnionType | TSESTree.TSUnknownKeyword | TSESTree.TSVoidKeyword | undefined;
export declare function findFirstMatchingAncestor(node: TSESTree.Node, predicate: (node: TSESTree.Node) => boolean): TSESTree.AssignmentPattern | TSESTree.RestElement | TSESTree.ArrayPattern | TSESTree.ObjectPattern | TSESTree.Identifier | TSESTree.TSParameterProperty | TSESTree.VariableDeclaration | TSESTree.VariableDeclarator | TSESTree.ArrowFunctionExpression | TSESTree.AssignmentExpression | TSESTree.BinaryExpression | TSESTree.ConditionalExpression | TSESTree.JSXClosingElement | TSESTree.JSXClosingFragment | TSESTree.JSXExpressionContainer | TSESTree.JSXOpeningElement | TSESTree.JSXOpeningFragment | TSESTree.JSXSpreadChild | TSESTree.LogicalExpression | TSESTree.NewExpression | TSESTree.SequenceExpression | TSESTree.SpreadElement | TSESTree.TSAsExpression | TSESTree.AwaitExpression | TSESTree.CallExpression | TSESTree.ClassExpression | TSESTree.ClassDeclaration | TSESTree.FunctionExpression | TSESTree.BigIntLiteral | TSESTree.Literal | TSESTree.TemplateLiteral | TSESTree.MemberExpression | TSESTree.OptionalCallExpression | TSESTree.OptionalMemberExpression | TSESTree.ArrayExpression | TSESTree.Import | TSESTree.JSXElement | TSESTree.JSXFragment | TSESTree.MetaProperty | TSESTree.ObjectExpression | TSESTree.Super | TSESTree.ThisExpression | TSESTree.TSNullKeyword | TSESTree.TaggedTemplateExpression | TSESTree.TSNonNullExpression | TSESTree.TSTypeAssertion | TSESTree.UnaryExpression | TSESTree.UpdateExpression | TSESTree.YieldExpression | TSESTree.CatchClause | TSESTree.BlockStatement | TSESTree.BreakStatement | TSESTree.ContinueStatement | TSESTree.DebuggerStatement | TSESTree.ExportDefaultDeclaration | TSESTree.ExportAllDeclaration | TSESTree.ExportNamedDeclaration | TSESTree.FunctionDeclaration | TSESTree.TSDeclareFunction | TSESTree.TSImportEqualsDeclaration | TSESTree.TSInterfaceDeclaration | TSESTree.TSModuleDeclaration | TSESTree.TSNamespaceExportDeclaration | TSESTree.TSTypeAliasDeclaration | TSESTree.TSEnumDeclaration | TSESTree.EmptyStatement | TSESTree.ExpressionStatement | TSESTree.IfStatement | TSESTree.DoWhileStatement | TSESTree.ForInStatement | TSESTree.ForOfStatement | TSESTree.ForStatement | TSESTree.WhileStatement | TSESTree.ImportDeclaration | TSESTree.LabeledStatement | TSESTree.TSModuleBlock | TSESTree.ReturnStatement | TSESTree.SwitchStatement | TSESTree.ThrowStatement | TSESTree.TryStatement | TSESTree.WithStatement | TSESTree.ClassBody | TSESTree.ClassProperty | TSESTree.Decorator | TSESTree.ExportSpecifier | TSESTree.ImportDefaultSpecifier | TSESTree.ImportNamespaceSpecifier | TSESTree.ImportSpecifier | TSESTree.JSXAttribute | TSESTree.JSXEmptyExpression | TSESTree.JSXIdentifier | TSESTree.JSXSpreadAttribute | TSESTree.JSXMemberExpression | TSESTree.JSXText | TSESTree.MethodDefinition | TSESTree.Program | TSESTree.Property | TSESTree.SwitchCase | TSESTree.TemplateElement | TSESTree.TSAbstractClassProperty | TSESTree.TSAbstractKeyword | TSESTree.TSAbstractMethodDefinition | TSESTree.TSAnyKeyword | TSESTree.TSArrayType | TSESTree.TSAsyncKeyword | TSESTree.TSBigIntKeyword | TSESTree.TSBooleanKeyword | TSESTree.TSCallSignatureDeclaration | TSESTree.TSClassImplements | TSESTree.TSConditionalType | TSESTree.TSConstructorType | TSESTree.TSConstructSignatureDeclaration | TSESTree.TSDeclareKeyword | TSESTree.TSEmptyBodyFunctionExpression | TSESTree.TSEnumMember | TSESTree.TSExportAssignment | TSESTree.TSExportKeyword | TSESTree.TSExternalModuleReference | TSESTree.TSFunctionType | TSESTree.TSImportType | TSESTree.TSIndexedAccessType | TSESTree.TSIndexSignature | TSESTree.TSInferType | TSESTree.TSInterfaceBody | TSESTree.TSInterfaceHeritage | TSESTree.TSIntersectionType | TSESTree.TSLiteralType | TSESTree.TSMappedType | TSESTree.TSMethodSignature | TSESTree.TSNeverKeyword | TSESTree.TSNumberKeyword | TSESTree.TSObjectKeyword | TSESTree.TSOptionalType | TSESTree.TSParenthesizedType | TSESTree.TSPropertySignature | TSESTree.TSPublicKeyword | TSESTree.TSPrivateKeyword | TSESTree.TSProtectedKeyword | TSESTree.TSQualifiedName | TSESTree.TSReadonlyKeyword | TSESTree.TSRestType | TSESTree.TSStaticKeyword | TSESTree.TSStringKeyword | TSESTree.TSSymbolKeyword | TSESTree.TSThisType | TSESTree.TSTupleType | TSESTree.TSTypeAnnotation | TSESTree.TSTypeLiteral | TSESTree.TSTypeOperator | TSESTree.TSTypeParameter | TSESTree.TSTypeParameterDeclaration | TSESTree.TSTypeParameterInstantiation | TSESTree.TSTypePredicate | TSESTree.TSTypeQuery | TSESTree.TSTypeReference | TSESTree.TSUndefinedKeyword | TSESTree.TSUnionType | TSESTree.TSUnknownKeyword | TSESTree.TSVoidKeyword | undefined;
export declare function localAncestorsChain(node: TSESTree.Node): TSESTree.Node[];
export declare function ancestorsChain(node: TSESTree.Node, boundaryTypes: Set<string>): TSESTree.Node[];
/**
 * Detect expression statements like the following:
 *  myArray[1] = 42;
 *  myArray[1] += 42;
 *  myObj.prop1 = 3;
 *  myObj.prop1 += 3;
 */
export declare function isElementWrite(statement: estree.ExpressionStatement, ref: Scope.Reference): boolean;
export declare function isReferenceTo(ref: Scope.Reference, node: estree.Node): boolean;
export declare function resolveIdentifiers(node: TSESTree.Node, acceptShorthand?: boolean): TSESTree.Identifier[];
export declare function isArray(node: estree.Node, services: RequiredParserServices): boolean;
export declare function getTypeFromTreeNode(node: estree.Node, services: RequiredParserServices): import("typescript").Type;
export declare function getTypeAsString(node: estree.Node, services: RequiredParserServices): string;
export declare function getSymbolAtLocation(node: estree.Node, services: RequiredParserServices): import("typescript").Symbol | undefined;
export declare function getSignatureFromCallee(node: estree.Node, services: RequiredParserServices): import("typescript").Signature | undefined;
export declare function isFunctionNode(node: estree.Node): node is FunctionNodeType;
